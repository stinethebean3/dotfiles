#!/bin/bash

# Reset processes

# GPG Agent Setup - If connected locally
if [ -z "$SSH_TTY" ]; then

    if  ( # deal with changed socket path in gnupg 2.1.13
          [[ ! -e "$HOME/.gnupg/S.gpg-agent" ]] && \
          [[ ! -e "/var/run/user/$(id -u)/gnupg/S.gpg-agent" ]]
       );
    then
		killall pinentry
		gpgconf --reload scdaemon
		/usr/bin/pkill -x -INT gpg-agent
        gpg-agent \
        	--daemon \
        	--enable-ssh-support \
        	--log-file "/dev/stdout"
    fi

    # Wake up smartcard to avoid races
    gpg --card-status > /dev/null 2>&1
fi

# If running remote via SSH
if [ ! -z "$SSH_TTY" ]; then

    # Copy gpg-socket forwarded from ssh to default location
    # This allows local gpg to be used on the remote system transparently.
    # Strongly discouraged unless GPG managed with a touch-activated GPG
    # smartcard such as a Yubikey 4.
    # Also assumes local .ssh/config contains host block similar to:
    # Host someserver.com
    #     ForwardAgent yes
    #     StreamLocalBindUnlink yes
    #     RemoteForward /home/user/.gnupg/S.gpg-agent.ssh /home/user/.gnupg/S.gpg-agent
    if [ -e $HOME/.gnupg/S.gpg-agent.ssh ]; then
        mv $HOME/.gnupg/S.gpg-agent{.ssh,}
    elif [ -e "/var/run/user/$(id -u)/gnupg/S.gpg-agent" ]; then
        mv /var/run/user/$(id -u)/gnupg/S.gpg-agent{.ssh,}
    fi

    # Ensure existing sessions like screen/tmux get latest ssh auth socket
    # Use fixed location updated on connect so in-memory location always works
    if [ ! -z "$SSH_AUTH_SOCK" -a \
        "$SSH_AUTH_SOCK" != "$HOME/.ssh/agent_sock" ];
    then
        unlink "$HOME/.ssh/agent_sock" 2>/dev/null
        ln -s "$SSH_AUTH_SOCK" "$HOME/.ssh/agent_sock"
    fi
    export SSH_AUTH_SOCK="$HOME/.ssh/agent_sock"
fi
